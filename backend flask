from flask import Flask, request, jsonify
import os
import pymysql
from werkzeug.utils import secure_filename

app = Flask(__name__)

# Configure file upload folder
UPLOAD_FOLDER = 'uploads/'
CONVERTED_FOLDER = 'converted/'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(CONVERTED_FOLDER, exist_ok=True)
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

# Database connection
db = pymysql.connect(
    host='localhost',
    user='root',
    password='your_password',
    database='file_conversion'
)

@app.route('/upload', methods=['POST'])
def upload_file():
    if 'file' not in request.files:
        return jsonify({"error": "No file part"}), 400

    file = request.files['file']
    target_format = request.form.get('format')

    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    if file:
        # Save original file
        filename = secure_filename(file.filename)
        file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(file_path)

        # Insert file metadata into the database
        cursor = db.cursor()
        cursor.execute(
            "INSERT INTO files (filename, target_format, status) VALUES (%s, %s, %s)",
            (filename, target_format, 'Uploaded')
        )
        db.commit()
        file_id = cursor.lastrowid

        # For simplicity, we'll simulate the conversion process
        converted_file_path = os.path.join(CONVERTED_FOLDER, f"{os.path.splitext(filename)[0]}.{target_format}")
        os.rename(file_path, converted_file_path)  # Simulated conversion

        # Update file status in the database
        cursor.execute(
            "UPDATE files SET status = %s, converted_filename = %s WHERE id = %s",
            ('Converted', os.path.basename(converted_file_path), file_id)
        )
        db.commit()

        return jsonify({"message": "File uploaded and converted", "file_id": file_id})

@app.route('/files/<int:file_id>', methods=['GET'])
def get_file_details(file_id):
    cursor = db.cursor(pymysql.cursors.DictCursor)
    cursor.execute("SELECT * FROM files WHERE id = %s", (file_id,))
    file = cursor.fetchone()

    if file:
        return jsonify(file)
    else:
        return jsonify({"error": "File not found"}), 404

if __name__ == '__main__':
    app.run(debug=True)
